name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners
# GitHub Actions does not support Docker, PostgreSQL server on Windows, macOS :(

jobs:
  ubuntu-latest:
    name: 'Ubuntu, PG latest (JDK ${{ matrix.jdk }})'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        jdk: [8, 11]
        os: [ubuntu-latest, self-hosted]
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
# Service must be started after checkout, because we want to use git-stored files for initialization
# of the Docker container. So we start it with and explicit docker ... command
#    services:
#      postgres:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: postgres
#          # Empty password
#          # POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: postgres
#        ports:
#          - 5432:5432
#        volumes:
#          - /home/runner/work/pgjdbc/pgjdbc/.travis:/scripts/.travis
#        # needed because the postgres container does not provide a healthcheck
#        options: >-
#          --name db
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Start PostgreSQL
      working-directory: docker
      run: docker-compose up -d && docker-compose logs
    - name: 'Get test node ARCH'
      run: echo "::set-output name=arch_name::$(uname -i)"
      id: get_arch_name

    - name: 'Set up JDK ${{ matrix.jdk }} on ARM64'
      id: setup_jdk_arm64
      if: ${{ steps.get_arch_name.outputs.arch_name == 'aarch64' }}
      run: |
        env
        set -ex
        sudo apt update
        sudo apt install openjdk-${{ matrix.jdk }}-jdk -y
        export JAVA_HOME=/usr/lib/jvm/java-${{ matrix.jdk }}-openjdk-arm64/ ;
        export PATH=$JAVA_HOME/bin:$PATH;
        echo ${{ steps.get_arch_name.outputs.arch_name }};
        echo "::set-output name=JAVA_HOME_ARM64::${JAVA_HOME}"
        echo "::set-env name=PATH::${PATH}"
    - name: 'Set up JDK ${{ matrix.jdk }}'
      uses: actions/setup-java@v1
      if: ${{ steps.get_arch_name.outputs.arch_name != 'aarch64' }}
      with:
        java-version: ${{ matrix.jdk }}
    - name: Prepare ssltest.local.properties
      run: echo enable_ssl_tests=true > ssltest.local.properties
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      with:
        job-id: jdk${{ matrix.jdk }}
        arguments: --scan --no-parallel --no-daemon jandex test
        properties: |
          skipReplicationTests=
          port=${{ job.services.postgres.ports['5432'] }}
